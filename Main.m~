%main file to execute triangulation
orig_img = imread('img1.jpg');
figure();
%denoise with gaussian filter
sigma = 2;
% Rule of thumb: set kernal size k ~= 2*pi*sigma
k = ceil(2*pi*sigma);
% Generate a Gaussian kernal 
h = fspecial('gaussian', [k k], sigma);
%h = fspecial('sobel');
    
% Perform convolution 
blur_img = imfilter(orig_img, h, 'conv', 'replicate');
    
% Display the result
imshow(blur_img); 
title(['\sigma = ' num2str(sigma)]);

%blur_img = imresize(blur_img,0.3);
gray_img = rgb2gray(blur_img);
thresh = 0.3;
edge_img = edge(gray_img,'canny', thresh);
imshow(edge_img);

%Randomly getting points from edges
[X,Y] = find(edge_img);
[XX,YY] = find(~edge_img);
num_vertices_edge = 500;
vertices_index_edge = randperm(size(X,1),num_vertices_edge);
vertices_index_nonedge = randperm(size(XX,1),num_vertices_edge);
vertices = zeros(2.*num_vertices_edge, 2);
for i = 1:num_vertices_edge
    vertices(i,:) = [X(vertices_index_edge(i)),Y(vertices_index_edge(i))];
end

for i = 1:num_vertices_edge
    vertices(num_vertices_edge+i,:) = [XX(vertices_index_nonedge(i)),YY(vertices_index_nonedge(i))];
end

dt = delaunayTriangulation(vertices);
%dt1 = delaunay(X,Y);

% Plot out the triPlot

triplot(dt);
%triplot(dt1);





